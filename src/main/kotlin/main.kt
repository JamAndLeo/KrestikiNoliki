import game.Game
import game.GameImpl
import view.View
import view.ViewImpl

/*

Начинаем учиться разбивать на файлы)
Абсолютно в всех языках программирования необходимо делить свое приложение (программу) на так называемые слои.
Их обычно три:
1) Слой отображения (View). Все что связано с показать пользователю
2) Слой логики (в андроиде называется обычно presenter). Там где лежит так называемая бизнес-логика, это основной код твоем программы.
Здесь для простоты я назвал это Game
3) Слой данных (Repository). Это для работы с данными, запросить что-то в интернете, сохранить в память, это все репозиторий.

Ты будешь встречать разные названия, но смысл будет оставаться тем же.
И еще важный момент - чем меньше слои знают о внутренней реализации друг друга тем лучше.
Я создал два интерфейса Game и View.
Рядом с ними тебе надо создать GameImpl и ViewImpl и сделать чтобы они наследовались от Game и View соответственно.
Интересный факт который пригодится только на собеседовании:
Классы наследуются, а интерфейсы имплементируются. Так говорить правильно, но в работе абсолютно похуй.

-----view-----
у нас в вью будут лежать какбы команды по отрисовке, то есть все, что ты хочешь показать через print или println должно быть только в вью.
Хороший тон в таких классах писать человеским языком, ты какбы просишь покажи текст через метод showText.
Создаешь в папке view класс ViewImpl и имплементируешь интерфейс View. Будет вот так class ViewImpl : View
По программистки это будет звучать: ViewImpl это реализация интерфейса View
class ViewImpl должен будет подчеркнуться красной линией, так как тебе надо реализовать все методы описанные в View.
например, первый метод будет выглядеть так
    override fun showText(text: String) {
        println(text)
    }
Обрати внимание, я создал енам GridItem и в вью есть метод showGameField(field: MutableList<MutableList<GridItem>>)
То есть массив только с элементами поля, никто кроме вью не должен знать как это поле будет отрисовываться, поэтому в нем не может быть
элементов типа |, только информация о состоянии поля

-----game-----
Это главный класс в твоем приложении. main.kt и в нем метод main это просто стартовая точка, все основная движуха должна быть в классе Game.
Как было описано выше реализуешь интерфейс Game через класс GameImpl.
Я сделал по тупому и метод play возращает булеан значение. то есть если игрок в конце сказал что хочет поиграть еще,
то возращаем true, если не хочет то false.
На твоем месте первым делом я бы перенес все из main.kt в GameImpl, а потом только брался за view.
Когда сделаешь view то в GameImpl
println("Наш боец PLAYER в кровавом углу ринга сделал свой ход")
у тебя должен превратиться
view.showText("Наш боец PLAYER в кровавом углу ринга сделал свой ход")

-----еще важный моментик-----
Пока тебе не надо знать почему, но пока возьми за строгое правило что слои нельзя создавать в классах других слоев.
Так что конструкор GameImpl должен ожидать что в него положат view : View.
И все классы тебе надо создать в main, собрать в кучу и после этого грубо говоря стартовать программу.
Это называется внедрение зависимостей (dependency injection)
В итоге у тебя весь main.kt должен выглядеть как-то так:


}*/

fun main() {
    println("Привествую тебя, Отважный, в жестокой битве между мастерами\nпыток на ХХ-дыбе и искусных в деле ОО-колесования!\nСражения идет до тех пор пока кто-то не выставит три своих\nорудия пытки в ряд по вертикали/горизонтали/диагонали.")

    val view: View = ViewImpl()
    val game: Game = GameImpl(view)
    var isRunning:Boolean = true
    while (isRunning) {
        isRunning = game.play()
    }

}
